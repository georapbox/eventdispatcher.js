{"version":3,"sources":["eventDispatcher.js"],"names":["name","context","definition","define","amd","module","exports","this","Error"],"mappings":";;;;;;;;;CA0DC,SAAUA,EAAMC,EAASC,GACxB,YAEsB,mBAAXC,SAAyBA,OAAOC,IACzCD,OAAOD,GACoB,mBAAXG,SAA0BA,OAAOC,QACjDD,OAAOC,QAAUJ,IAEjBD,EAAQD,GAAQE,EAAWF,EAAMC,IAEnC,kBAAmBM,KAAM,WACzB,YAEA,MAAM,IAAIC,OAAM","file":"eventDispatcher.min.js","sourcesContent":["/**\n * @module eventDispatcher\n * @desc JavaScript events for custom objects\n * @see original project at https://github.com/mrdoob/eventdispatcher.js\n * @example\n *\n * var car = {\n *   start: function (afterStartCallback) {\n *     // Dispatch `start` event.\n *     this.dispatchEvent({type: 'start', message: 'Start engines'});\n *     afterStartCallback && afterStartCallback(this);\n *   },\n *   stop: function () {\n *     // Dispatch `stop` event.\n *     this.dispatchEvent({type: 'stop', message: 'Stop engines'});\n *   }\n * };\n *\n * function startEngines(event) {\n *   console.log(event.message);\n * }\n *\n * function stopEngines(event) {\n *   console.log(event.message);\n * }\n *\n * // Apply `eventDispatcher` methods to the prototype of the event target.\n * eventDispatcher.apply(Object.getPrototypeOf(car));\n *\n * // Register event listeners to event target.\n * car\n *   .addEventListener('start', startEngines)\n *   .addEventListener('afterStart', startEngines)\n *   .addEventListener('stop', stopEngines);\n *\n * // `start` event fires first, then `afterStart` and finally\n * // after two seconds `stop` events fires.\n *\n * car.start(function (self) {\n *   // Dispatch `afterStart` event.\n *   self.dispatchEvent({type: 'afterStart', message: 'Car has started'});\n * });\n *\n * console.log(car.hasEventListener('start', startEngines));      // -> true\n * console.log(car.hasEventListener('afterStart', startEngines)); // -> true\n * console.log(car.hasEventListener('stop', startEngines));       // -> false\n * console.log(car.hasEventListener('stop', stopEngines));        // -> true\n *\n * setTimeout(function () {\n *   car.stop();\n *\n *   // Remove all event listeners from event target.\n *   car\n *     .removeEventListener('start', startEngines)\n *     .removeEventListener('afterStart', startEngines)\n *     .removeEventListener('stop', stopEngines);\n * }, 2000);\n */\n(function (name, context, definition) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    define(definition);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = definition();\n  } else {\n    context[name] = definition(name, context);\n  }\n}('eventDispatcher', this, function () {\n  'use strict';\n\n  throw new Error('ERROR');\n\n  /** @lends eventDispatcher */\n  var eventDispatcherPrototype = {\n    /**\n     * Registers the specified `listener` on the event target it's called on.\n     *\n     * @function addEventListener\n     * @param {String} type A string representing the event type to listen for.\n     * @param {function} listener A function to be executed when an event of the specified `type` occurs.\n     * @return {Object} The `eventDispatcher` object.\n     */\n    addEventListener: function (type, listener) {\n      var listeners;\n\n      if (typeof this._listeners === 'undefined') {\n        this._listeners = {};\n      }\n\n      listeners = this._listeners;\n\n      if (typeof listeners[type] === 'undefined') {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === - 1) {\n        listeners[type].push(listener);\n      }\n\n      return this;\n    },\n\n    /**\n     * Checks if the target object has a `listener` registered on for specific event `type`..\n     *\n     * @function hasEventListener\n     * @param {String} type A string representing the event type.\n     * @param {function} listener The event listener to check if registered for the specified event `type`.\n     * @return {Boolean} True if target object has `listener` registered for specific event `type`; otherwise false.\n     */\n    hasEventListener: function (type, listener) {\n      var listeners;\n\n      if (typeof this._listeners === 'undefined') {\n        return false;\n      }\n\n      listeners = this._listeners;\n\n      if (typeof listeners[type] !== 'undefined' && listeners[type].indexOf(listener) !== - 1) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Removes the previously registered event `listener` from the event target.\n     *\n     * @function removeEventListener\n     * @param {String} type A string representing the event type to remove.\n     * @param {function} listener The event listener function to remove from the event target.\n     * @return {Object} The `eventDispatcher` object.\n     */\n    removeEventListener: function (type, listener) {\n      var listeners, listenerArray, index;\n\n      if (typeof this._listeners === 'undefined') {\n        return;\n      }\n\n      listeners = this._listeners;\n      listenerArray = listeners[type];\n\n      if (typeof listenerArray !== 'undefined') {\n        index = listenerArray.indexOf(listener);\n\n        if (index !== - 1) {\n          listenerArray.splice(index, 1);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Dispatches an event at the specified event target.\n     *\n     * @function dispatchEvent\n     * @param {Object} event The event object to be dispatched.\n     * @return {Object} The `eventDispatcher` object.\n     */\n    dispatchEvent: function (event) {\n      var listeners, listenerArray, i, length;\n\n      if (typeof this._listeners === 'undefined') {\n        return;\n      }\n\n      listeners = this._listeners;\n      listenerArray = listeners[event.type];\n\n      if (typeof listenerArray !== 'undefined') {\n        event.target = this;\n\n        length = listenerArray.length;\n\n        for (i = 0; i < length; i += 1) {\n          listenerArray[i].call(this, event);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var eventDispatcher = Object.create(eventDispatcherPrototype, {\n    apply: {\n      /**\n       * Applies the `eventDispatcher` prototype methods to the event target.\n       *\n       * @function apply\n       * @param {Object} object The event target object.\n       * @return {Object} The `eventDispatcher` object.\n       */\n      value: function applyEventDispatcher(object) {\n        object.addEventListener = eventDispatcherPrototype.addEventListener;\n        object.hasEventListener = eventDispatcherPrototype.hasEventListener;\n        object.removeEventListener = eventDispatcherPrototype.removeEventListener;\n        object.dispatchEvent = eventDispatcherPrototype.dispatchEvent;\n        return this;\n      }\n    }\n  });\n\n  return eventDispatcher;\n}));\n"],"sourceRoot":"/source/"}